name: Application Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - '.github/workflows/app-pipeline.yml'
  workflow_run:
    workflows: ["Infrastructure Pipeline"]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fastapi-app
  EKS_CLUSTER_NAME: my-eks-cluster
  HELM_VERSION: v3.12.0

jobs:
  test-and-build:
    name: "Test and Build Application"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Set up Python and dependencies"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: "Install dependencies"
        run: |
          cd app
          pip install -r requirements.txt
      - name: "Run tests"
        run: |
          cd app
          pytest

  build-and-push:
    name: "Build and Push Docker Image to ECR"
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: "Build and push Docker image"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

  deploy:
    name: "Deploy to EKS with Helm"
    needs: build-and-push
    runs-on: self-hosted
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Install kubectl"
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: "Check if EKS cluster exists"
        run: |
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      - name: "Update kubeconfig"
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      - name: "Check EKS connectivity"
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl get nodes
      - name: "Install Helm"
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      - name: "Deploy with Helm"
        run: |
          helm upgrade --install fastapi-app ./helm/fastapi-app \
            --namespace production \
            --create-namespace \
            -f helm/fastapi-app/values-prod.yaml \
            --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
            --set image.tag=${{ github.sha }} \
            --wait 