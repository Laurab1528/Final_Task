concurrency:
  group: terraform-infra
  cancel-in-progress: true

name: Infrastructure Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-pipeline.yml'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-pipeline.yml'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.5.0"

jobs:
  bootstrap-infra:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Ensure S3 bucket for Terraform state exists"
        run: |
          if ! aws s3api head-bucket --bucket epam-final-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket epam-final-terraform-state --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket epam-final-terraform-state --versioning-configuration Status=Enabled
          fi
      - name: "Ensure DynamoDB table for Terraform lock exists"
        run: |
          if ! aws dynamodb describe-table --table-name epam-final-terraform-locks --region ${{ env.AWS_REGION }} 2>/dev/null; then
            aws dynamodb create-table \
              --table-name epam-final-terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.AWS_REGION }}
          fi
      - name: "Terraform Init"
        run: cd terraform && terraform init
      - name: "Terraform Apply (bootstrap)"
        run: cd terraform && terraform apply -target=module.vpc -target=module.runner -auto-approve

  full-infra:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: bootstrap-infra
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Ensure S3 bucket for Terraform state exists"
        run: |
          if ! aws s3api head-bucket --bucket epam-final-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket epam-final-terraform-state --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket epam-final-terraform-state --versioning-configuration Status=Enabled
          fi
      - name: "Ensure DynamoDB table for Terraform lock exists"
        run: |
          if ! aws dynamodb describe-table --table-name epam-final-terraform-locks --region ${{ env.AWS_REGION }} 2>/dev/null; then
            aws dynamodb create-table \
              --table-name epam-final-terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.AWS_REGION }}
          fi
      - name: "Terraform Init"
        run: cd terraform && terraform init
      - name: "Terraform Apply (full infra)"
        run: cd terraform && terraform apply -auto-approve
