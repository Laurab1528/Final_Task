name: Infrastructure Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.5.0"

jobs:
  terraform:
    name: "Provision infrastructure with Terraform"
    runs-on: self-hosted
    steps:
      - name: "Set up Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: "Checkout repository"
        uses: actions/checkout@v3
      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Ensure S3 bucket for Terraform state exists"
        run: |
          if ! aws s3api head-bucket --bucket epam-final-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket epam-final-terraform-state --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket epam-final-terraform-state --versioning-configuration Status=Enabled
          fi
      - name: "Ensure DynamoDB table for Terraform lock exists"
        run: |
          if ! aws dynamodb describe-table --table-name epam-final-terraform-locks --region ${{ env.AWS_REGION }} 2>/dev/null; then
            aws dynamodb create-table \
              --table-name epam-final-terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.AWS_REGION }}
          fi
      - name: "Create terraform.tfvars"
        run: |
          cat > terraform/terraform.tfvars <<EOF
          api_key    = "${{ secrets.API_KEY }}"
          aws_region = "${{ env.AWS_REGION }}"
          github_pat = "${{ secrets.GITHUB_PAT }}"
          EOF
      - name: "Initialize Terraform"
        run: |
          cd terraform
          terraform init
      - name: "Plan infrastructure changes"
        run: |
          cd terraform
          TF_LOG=DEBUG terraform plan -lock=false
      - name: "Apply infrastructure changes"
        run: |
          cd terraform
          terraform apply -auto-approve -lock=false
      - name: "Delete terraform.tfvars"
        if: always()
        run: |
          rm -f terraform/terraform.tfvars
      - name: "Update kubeconfig for EKS"
        run: |
          aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster
