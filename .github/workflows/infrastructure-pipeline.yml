name: Infrastructure Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.5.0"
  TFLINT_VERSION: "v0.44.1"

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: Run TFLint
      run: |
        cd terraform
        tflint --init
        tflint --format=compact
    - name: Run tfsec (Terraform security analysis)
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        tfsec terraform/
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Create Terraform Variables File
      run: |
        cd terraform
        cat > terraform.tfvars <<EOF
        aws_region = "${{ env.AWS_REGION }}"
        aws_access_key_id = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_access_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        EOF

    - name: Mover temporalmente terraform.tfvars
      run: |
        cd terraform
        mv terraform.tfvars terraform.tfvars.bak

    - name: Terraform Format
      id: fmt
      run: |
        cd terraform
        terraform fmt -check

    - name: Devolver terraform.tfvars
      run: |
        cd terraform
        mv terraform.tfvars.bak terraform.tfvars
    
    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        cd terraform
        terraform plan -no-color
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -auto-approve
    
    - name: Clean up Terraform Variables File
      if: always()
      run: |
        cd terraform
        rm -f terraform.tfvars 
